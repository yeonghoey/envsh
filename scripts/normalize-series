#!/usr/bin/env python3

import os
import re

import click


DIR = click.Path(exists=True, file_okay=False, dir_okay=True)


@click.command()
@click.option('--dir', 'dir_', default='.', type=DIR)
@click.argument('input_pattern')
@click.argument('output_pattern')
def main(dir_, input_pattern, output_pattern):
    inputs = list_inputs(dir_)
    renamer = compile_renamer(input_pattern, output_pattern)
    for f in inputs:
        print(f, '\t', renamer(f))


def list_inputs(dir_):
    for e in os.listdir(dir_):
        p = os.path.join(dir_, e)
        if os.path.isfile(p):
            yield p


def compile_renamer(input_pattern, output_pattern):
    ro = compile_input_pattern(input_pattern)
    fmt = compile_output_pattern(output_pattern)
    print(fmt)

    def f(input_):
        name, ext = os.path.splitext(input_)
        mo = ro.match(name)
        if mo is not None:
            d = {k: int(v) for k, v in mo.groupdict().items()}
            renamed = fmt.format(**d)
            return renamed + ext
        else:
            return None

    return f


def compile_input_pattern(input_pattern):
    def repl(mo):
        x = mo.group(0)
        a = x[0]
        assert all(a == ch for ch in x)
        return r'(?P<_%s>%s)' % (a, '\d'*len(x))

    patterns = [re.sub(r'\d+', repl, term) for term in input_pattern.split()]
    patterns = [r'^'] + patterns + [r'$']
    regex = r'.*'.join(patterns)
    return re.compile(regex)


def compile_output_pattern(output_pattern):
    def repl(mo):
        x = mo.group(0)
        a = x[0]
        assert all(a == ch for ch in x)
        return r'{_%s:0%dd}' % (a, len(x))

    return re.sub(r'\d+', repl, output_pattern)


if __name__ == '__main__':
    main()
